name: GO CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go 
        uses: actions/setup-go@v4
        with:
          go-version: '>=1.21.0'

      - name: Install dependencies
        run: go mod tidy

      - name: Install expect tool (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            sudo apt-get update && sudo apt-get install -y expect
          elif [ "${{ runner.os }}" == "macOS" ]; then
            brew install expect
          fi

      - name: Create test directory (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          mkdir -p /tmp/test_dir
          echo "file1.txt" > /tmp/test_dir/file1.txt
          echo "file2.txt" > /tmp/test_dir/file2.txt

      - name: Create test directory (Windows)
        if: runner.os == 'Windows'
        run: |
          New-Item -Path "C:\temp\test_dir" -ItemType Directory -Force
          "file1.txt" | Out-File -FilePath "C:\temp\test_dir\file1.txt" -Force
          "file2.txt" | Out-File -FilePath "C:\temp\test_dir\file2.txt" -Force

      - name: Set environment variable for file path (Linux/macOS)
        if: runner.os != 'Windows'
        run: echo "FILE_DIR=/tmp/test_dir" >> $GITHUB_ENV

      - name: Set environment variable for file path (Windows)
        if: runner.os == 'Windows'
        run: echo "FILE_DIR=C:\\temp\\test_dir" >> $GITHUB_ENV

      # Linux/macOS: Run with expect
      - name: Run Text Input example (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          expect <<EOF
          spawn go run examples/example3.go
          expect "Enter your age:"
          send "25\r"
          expect "Your entered age is 25"
          EOF

      # Windows: Run with AHK
      - name: Install AutoHotkey (Windows)
        if: runner.os == 'Windows'
        run: choco install autohotkey.portable

      - name: Run Text Input example (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "
          Run 'go run examples/example3.go'
          Sleep, 2000
          Send, 25{Enter}
          Sleep, 1000
          " > text_input_test.ahk
          Start-Process "AutoHotkey64.exe" -ArgumentList "text_input_test.ahk"

      - name: Run Password Input example (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          expect <<EOF
          spawn go run examples/example4.go
          expect "Enter your password: "
          send "123456\r"
          expect "Password entered => 123456"
          EOF

      - name: Run Password Input example (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "
          Run 'go run examples/example4.go'
          Sleep, 2000
          Send, 123456{Enter}
          Sleep, 1000
          " > password_input_test.ahk
          Start-Process "AutoHotkey64.exe" -ArgumentList "password_input_test.ahk"

      - name: Run Filepath Example (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          expect <<EOF
          spawn go run examples/example1.go
          expect "Select a file:"
          send "$::env(FILE_DIR)\r"
          expect "Selected file: file1.txt"
          EOF

      - name: Run Filepath Example (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "
          Run 'go run examples/example1.go'
          Sleep, 2000
          Send, C:\\temp\\test_dir\\file1.txt{Enter}
          Sleep, 1000
          " > filepath_test.ahk
          Start-Process "AutoHotkey64.exe" -ArgumentList "filepath_test.ahk"
