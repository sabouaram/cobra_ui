name: CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '>=1.21.0'

      - name: Install dependencies
        run: go mod tidy

      # Install Python and pip
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Install `pexpect` or `wexpect` based on the platform
      - name: Install pexpect on Linux/macOS
        if: matrix.os != 'windows-latest'
        run: |
          python -m pip install pexpect

      - name: Install wexpect on Windows
        if: matrix.os == 'windows-latest'
        run: |
          python -m pip install --upgrade pip
          pip install setuptools
          pip install wexpect


      - name: Create test directory (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          mkdir -p /tmp/test_dir
          echo "file1.txt" > /tmp/test_dir/file1.txt
          echo "file2.txt" > /tmp/test_dir/file2.txt

      - name: Create test directory (Windows)
        if: runner.os == 'Windows'
        run: |
          New-Item -Path "C:\temp\test_dir" -ItemType Directory -Force
          "file1.txt" | Out-File -FilePath "C:\temp\test_dir\file1.txt" -Force
          "file2.txt" | Out-File -FilePath "C:\temp\test_dir\file2.txt" -Force
          
          
      - name: Set environment variable for file path (Linux/macOS)
        if: runner.os != 'Windows'
        run: echo "FILE_DIR=/tmp/test_dir" >> $GITHUB_ENV

      - name: Set environment variable for file path (Windows)
        if: runner.os == 'Windows'
        run: echo "FILE_DIR=C:\\temp\\test_dir" >> $GITHUB_ENV

      # Run Text Input example with validation (Windows)
      - name: Run Text Input example (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          cd
          python input_windows.py
          
      - name: Run Text Input example (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          python input_unix.py
          

      # Run Password Input example with validation (Linux/macOS)
      - name: Run Password Input example (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          python pwd_unix.py
          

      - name: Run Password Input example (Windows)
        if: runner.os == 'Windows'
        run: |
          python pwd_windows.py
          
      # Run Password chocices example with validation (Linux/macOS)
      - name: Run choice example (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          python multiple_unix.py
          

      - name: Run choice example (Windows)
        if: runner.os == 'Windows'
        run: |
          python multiple_windows.py
          

