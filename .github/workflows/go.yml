name: GO CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go 
        uses: actions/setup-go@v4
        with:
          go-version: '>=1.21.0'

      - name: Install dependencies
        run: go mod tidy

      - name: Install expect tool (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            sudo apt-get update && sudo apt-get install -y expect
          elif [ "${{ runner.os }}" == "macOS" ]; then
            brew install expect
          fi

      - name: Install Python and pynput (Linux/macOS/Windows)
        if: runner.os != 'Windows'
        run: |
          python3 -m pip install pynput
        if: runner.os == 'Windows'
        run: |
          python -m pip install pynput

      - name: Create test directory (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            mkdir -p /tmp/test_dir
            echo "file1.txt" > /tmp/test_dir/file1.txt
            echo "file2.txt" > /tmp/test_dir/file2.txt
          elif [ "${{ runner.os }}" == "macOS" ]; then
            mkdir -p /tmp/test_dir
            echo "file1.txt" > /tmp/test_dir/file1.txt
            echo "file2.txt" > /tmp/test_dir/file2.txt
          fi

      - name: Create test directory (Windows)
        if: runner.os == 'Windows'
        run: |
          New-Item -Path "C:\temp\test_dir" -ItemType Directory -Force
          "file1.txt" | Out-File -FilePath "C:\temp\test_dir\file1.txt" -Force
          "file2.txt" | Out-File -FilePath "C:\temp\test_dir\file2.txt" -Force

      - name: Set environment variable for file path (Linux/macOS)
        if: runner.os != 'Windows'
        run: echo "FILE_DIR=/tmp/test_dir" >> $GITHUB_ENV

      - name: Set environment variable for file path (Windows)
        if: runner.os == 'Windows'
        run: echo "FILE_DIR=C:\\temp\\test_dir" >> $GITHUB_ENV

      - name: Detect Down Arrow Key Sequence (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          python3 - <<EOF
import sys
import termios
import tty

def get_escape_sequence():
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(sys.stdin.fileno())
        ch = sys.stdin.read(1)
        if ch == '\x1b':
            ch = sys.stdin.read(2)
            return '\x1b' + ch
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    return ''

print("Simulating down arrow key press...")
import time
time.sleep(1)  # Wait to simulate key press delay
sequence = get_escape_sequence()
print(f"Detected escape sequence: {sequence}")
EOF
        echo "DOWN_ARROW_SEQUENCE=$(python3 -c 'import sys; print(sys.stdin.read().strip())')" >> $GITHUB_ENV

      - name: Detect Down Arrow Key Sequence (Windows)
        if: runner.os == 'Windows'
        run: |
          python - <<EOF
from pynput import keyboard

def on_press(key):
    try:
        print(f'Alphanumeric key {key.char} pressed')
    except AttributeError:
        print(f'Special key {key} pressed')

def on_release(key):
    if key == keyboard.Key.esc:
        return False

print("Press any key to capture its escape sequence...")
with keyboard.Listener(on_press=on_press, on_release=on_release) as listener:
    listener.join()
EOF
        echo "DOWN_ARROW_SEQUENCE=$(python -c "import sys; print(sys.stdin.read().strip())")" >> $GITHUB_ENV

      - name: Run Text Input example (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          expect <<EOF
          spawn go run examples/example3.go
          expect "Enter your age:"
          send "25\r"
          expect "Your entered age is 25"
          EOF

      - name: Run Text Input example (Windows)
        if: runner.os == 'Windows'
        run: |
          expect <<EOF
          spawn go run examples/example3.go
          expect "Enter your age:"
          send "25\r\n"
          expect "Your entered age is 25"
          EOF

      - name: Run Password Input example (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          expect <<EOF
          spawn go run examples/example4.go
          expect "Enter your password: "
          send "123456\r"
          expect "Password entered => 123456"
          EOF

      - name: Run Password Input example (Windows)
        if: runner.os == 'Windows'
        run: |
          expect <<EOF
          spawn go run examples/example4.go
          expect "Enter your password: "
          send "123456\r\n"
          expect "Password entered => 123456"
          EOF

      - name: Run Choices Example (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          expect <<EOF
          spawn go run examples/example2.go
          expect "$ "
          send -- "$DOWN_ARROW_SEQUENCE"  # down arrow to select the next option
          send "\r"      # press Enter
          expect "Selected choice: Python"
          EOF

      - name: Run Choices Example (Windows)
        if: runner.os == 'Windows'
        run: |
          expect <<EOF
          spawn go run examples/example2.go
          expect "$ "
          send -- "$DOWN_ARROW_SEQUENCE"  # down arrow to select the next option
          send "\r\n"    # press Enter
          expect "Selected choice: Python"
          EOF

      - name: Run Filepath Example (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          expect <<EOF
          spawn go run examples/example1.go
          expect "Select a file:"
          send "$FILE_DIR/file1.txt\r"  # Send the file path
          expect "Selected file: file1.txt"
          EOF

      - name: Run Filepath Example (Windows)
        if: runner.os == 'Windows'
        run: |
          expect <<EOF
          spawn go run examples/example1.go
          expect "Select a file:"
          send "C:\\temp\\test_dir\\file1.txt\r\n"  # Send the file path
          expect "Selected file: file1.txt"
          EOF
