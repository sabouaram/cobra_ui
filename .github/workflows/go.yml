name: lili

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '>=1.21.0'

      - name: Install dependencies
        run: go mod tidy

      - name: Install expect tool (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            sudo apt-get update && sudo apt-get install -y expect
          elif [ "${{ runner.os }}" == "macOS" ]; then
            brew install expect
          fi

      - name: Create test directory (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          mkdir -p /tmp/test_dir
          echo "file1.txt" > /tmp/test_dir/file1.txt
          echo "file2.txt" > /tmp/test_dir/file2.txt

      - name: Create test directory (Windows)
        if: runner.os == 'Windows'
        run: |
          New-Item -Path "C:\temp\test_dir" -ItemType Directory -Force
          "file1.txt" | Out-File -FilePath "C:\temp\test_dir\file1.txt" -Force
          "file2.txt" | Out-File -FilePath "C:\temp\test_dir\file2.txt" -Force

      - name: Set environment variable for file path (Linux/macOS)
        if: runner.os != 'Windows'
        run: echo "FILE_DIR=/tmp/test_dir" >> $GITHUB_ENV

      - name: Set environment variable for file path (Windows)
        if: runner.os == 'Windows'
        run: echo "FILE_DIR=C:\\temp\\test_dir" >> $GITHUB_ENV

      # Install AutoIt on Windows
      - name: Install AutoIt (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install autoit --yes

      # List all installed Chocolatey packages (Windows)
      - name: List Chocolatey packages (Windows)
        if: runner.os == 'Windows'
        run: |
          choco list --local-only

      # Find AutoIt executable path (Windows)
      - name: Find AutoIt executable path (Windows)
        if: runner.os == 'Windows'
        id: find_autoit_path
        run: |
          # Check default installation paths
          $possiblePaths = @(
            "C:\Program Files (x86)\AutoIt3\AutoIt3.exe",
            "C:\Program Files (x86)\AutoIt3\AutoIt3_x64.exe",
            "C:\ProgramData\chocolatey\lib\autoit\tools\AutoIt3.exe"
          )
          $autoItPath = $possiblePaths | Where-Object { Test-Path $_ }
          if (-not $autoItPath) {
            Write-Output "AutoIt executable not found."
            exit 1
          }
          Write-Output "AutoIt executable found at $autoItPath"
          echo "AUTOIT_PATH=$autoItPath" >> $GITHUB_ENV

      # Run Text Input example with validation (Windows)
      - name: Run Text Input example (Windows)
        if: runner.os == 'Windows'
        run: |
          echo '
          Run("cmd.exe")
          WinWait("Command Prompt")
          Send("go run examples/example3.go{ENTER}")
          Sleep(5000)
          Send("25{ENTER}")
          Sleep(1000)
          WinGetText("Command Prompt", output)
          IfInString(output, "Your entered age is 25") Then
              MsgBox(0, "Test Passed", "The output is correct.")
              ExitApp
          Else
              MsgBox(16, "Test Failed", "The output is incorrect.")
              ExitApp 1
          ' > text_input_test.au3
          & "$env:AUTOIT_PATH" text_input_test.au3
          if ($LASTEXITCODE -ne 0) { exit 1 }

      # Run Password Input example with validation (Linux/macOS)
      - name: Run Password Input example (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          expect <<EOF
          spawn go run examples/example4.go
          expect "Enter your password: "
          send "123456\r"
          expect "Password entered => 123456"
          EOF

      # Run Password Input example with validation (Windows)
      - name: Run Password Input example (Windows)
        if: runner.os == 'Windows'
        run: |
          echo '
          Run("cmd.exe")
          WinWait("Command Prompt")
          Send("go run examples/example4.go{ENTER}")
          Sleep(5000)
          Send("123456{ENTER}")
          Sleep(1000)
          WinGetText("Command Prompt", output)
          IfInString(output, "Password entered => 123456") Then
              MsgBox(0, "Test Passed", "The output is correct.")
              ExitApp
          Else
              MsgBox(16, "Test Failed", "The output is incorrect.")
              ExitApp 1
          ' > password_input_test.au3
          & "$env:AUTOIT_PATH" password_input_test.au3
          if ($LASTEXITCODE -ne 0) { exit 1 }

      # Run Filepath Example with validation (Linux/macOS)
      - name: Run Filepath Example (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          expect <<EOF
          spawn go run examples/example1.go
          expect "Select a file:"
          send "$::env(FILE_DIR)\r"
          expect "Selected file: file1.txt"
          EOF

      # Run Filepath Example with validation (Windows)
      - name: Run Filepath Example (Windows)
        if: runner.os == 'Windows'
        run: |
          echo '
          Run("cmd.exe")
          WinWait("Command Prompt")
          Send("go run examples/example1.go{ENTER}")
          Sleep(5000)
          Send("C:\\temp\\test_dir\\file1.txt{ENTER}")
          Sleep(1000)
          WinGetText("Command Prompt", output)
          IfInString(output, "Selected file: file1.txt") Then
              MsgBox(0, "Test Passed", "The file was selected correctly.")
              ExitApp
          Else
              MsgBox(16, "Test Failed", "The file selection failed.")
              ExitApp 1
          ' > filepath_test.au3
          & "$env:AUTOIT_PATH" filepath_test.au3
          if ($LASTEXITCODE -ne 0) { exit 1 }
